"""
GraphQL schema definitions.
"""

type Query {
  player(id: ID!, half: Int!): Player
  players: [Player!]!
  playerGameweekScore(id: ID!, gameweek:Int!): PlayerGameweekScore
  gameweekScore(gameweek: Int!): [PlayerGameweekScore!]!
  leagueWeeklyReport(leagueId: Int!, gameweek:Int!): LeagueWeeklyReport!
}

type PlayerGameweekScore {
    index: Int!
    player_id: Int!
    minutes: Int!
    goals_scored: Int!
    assists: Int!
    clean_sheets: Int!
    goals_conceded: Int!
    own_goals: Int!
    penalties_saved: Int!
    penalties_missed: Int!
    yellow_cards: Int!
    red_cards: Int!
    saves: Int!
    bonus: Int!
    bps: Int!
    influence: Int!
    creativity: Int!
    threat: Int!
    ict_index: Int!
    starts: Int!
    expected_goals: String!
    expected_assists: String!
    expected_goal_involvements: String!
    expected_goals_conceded: String!
    total_points: String!
    in_dreamteam: Int!
    gameweek: Int!
}

type Player {
    index: Int!
    player_id: String!
    player_name: String!
    position: String!
    team:  String!
    half:  Int!
}

type LeagueWeeklyReport {
  captain: [CaptainStat!]!
  chips: ChipStats
  promotedVice: [promotedViceInfo]
  exceptional: TeamPerformance
  abysmal: TeamPerformance
  leagueAverage: Float!
  rise: [PerformanceChange]!
  fall: [PerformanceChange]!
  mostTransferredOut: [outTransfer]
  mostTransferredIn: [inTransfer]
  bestTransferIn: [transferImpact]!
  worstTransferIn: [transferImpact]!
  mostPointsOnBench: [BenchPerformance]!
  jammyPoints: [JammyPoints]
  mostBenched: mostBenched!
}

type promotedViceInfo {
  promotedVicePoints: Int!
  participantsName: String!
  captainName: String!
  viceCaptainName : String!
}

type inTransfer {
  player: String
  in: Int
}

type outTransfer {
  player: String
  out: Int
}

type CaptainStat {
  player: Int!
  count: Int!
}

type ChipStats { 
  chip: String
  count: Int
}

type TeamPerformance {
  teamName: String
  score: Int
}

type PerformanceChange {
  currentRank: Int!
  prevRank: Int!
  participantName: String!
}

type transferImpact {
  teamName: String
  playerIn: String
  playerOut: String
  pointsDelta: Int
}

type BenchPerformance {
  teamName: String!
  players: [String!]
  pointOnBench: Int!
}

type PlayerPerformance {
  name: String!
  points: Int!
}

type JammyPoints {
  teamName: String
  subIn: [String]
  subOut: [String]
  points: Int
}

type mostBenched {
  player: [String!]
  count: [Int!]
  points: [Int!]
}

